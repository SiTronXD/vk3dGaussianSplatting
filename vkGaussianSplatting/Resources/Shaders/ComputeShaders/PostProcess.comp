#version 450

#extension GL_GOOGLE_include_directive: require

#include "../Common/ColorTransformations.glsl"

layout (local_size_x = 16, local_size_y = 16) in;

// SBO
struct GaussianData
{
	vec4 position;
	vec4 scale;
};
layout(binding = 0) readonly buffer GaussiansBuffer
{
	GaussianData gaussians[];
} gaussiansBuffer;

// UBO
layout(binding = 1) uniform UniformBufferObject 
{
	mat4 viewMat;
	mat4 projMat;
} ubo;

layout (binding = 2, rgba16f) uniform readonly image2D hdrImage;
layout (binding = 3, rgba8) uniform image2D swapchainImage;

// Push constant
layout(push_constant) uniform PushConstantData
{
	uvec4 resolution;
} pc;

void main()
{
	uvec2 index = gl_GlobalInvocationID.xy;
	uvec2 res = pc.resolution.xy;

	// Make sure compute work is within bounds
	if(index.x >= res.x || index.y >= res.y)
		return;

	// UVs
	float width = float(res.x);
	float height = float(res.y);
	float aspectRatio = width / height;
	vec2 uv = (vec2(index) / vec2(res.xy)) * 2.0 - vec2(1.0);
	uv.x *= aspectRatio;

	vec3 color = vec3(0.0f);

	// Overlay 3D scene, for temporary debugging
	color = imageLoad(hdrImage, ivec2(index)).rgb;
	color = clamp(color, vec3(0.0f), vec3(1.0f));
	color = vec3(1.0f) - color;
	color *= 0.3f;

	const mat4 viewMat = ubo.viewMat;

	// Gaussian	data
	vec3 gScale = gaussiansBuffer.gaussians[0].scale.xyz;
	vec3 gPosW = gaussiansBuffer.gaussians[0].position.xyz;
	vec4 gPosV = viewMat * vec4(gPosW, 1.0f);

	// "Frustum culling"
	if(gPosV.z < 0.0f)
	{
		vec4 gaussianPosScreen = ubo.projMat * gPosV;
		gaussianPosScreen.xyz /= gaussianPosScreen.w;
		gaussianPosScreen.y = -gaussianPosScreen.y;
		gaussianPosScreen.xy = (gaussianPosScreen.xy + vec2(1.0f)) * 0.5f;
		gaussianPosScreen.xy *= vec2(width, height);

		// Sigma = R * S * S^T * R^T
		mat3x3 rotMat = mat3x3(	1.0f, 0.0f, 0.0f,
								0.0f, 1.0f, 0.0f,
								0.0f, 0.0f, 1.0f);
		mat3x3 scaleMat = mat3x3(gScale.x,	0.0f,		0.0f,
								 0.0f,		gScale.y,	0.0f,
								 0.0f,		0.0f,		gScale.z);
		mat3x3 sigma = rotMat * scaleMat * transpose(scaleMat) * transpose(rotMat);

		// SigmaPrime = J * W * Sigma * W^T * J^T
		mat3x3 W = mat3x3(	viewMat[0][0], viewMat[0][1], viewMat[0][2],
							viewMat[1][0], viewMat[1][1], viewMat[1][2],
							viewMat[2][0], viewMat[2][1], viewMat[2][2]);
	
		float tanFovY = tan(3.1415f * 0.5f * 0.5f);
		float tanFovX = tanFovY * aspectRatio;
		float focalX = width / (2.0f * tanFovX);
		float focalY = height / (2.0f * tanFovY);
		mat3x3 J = mat3x3(	focalX / gPosV.z, 0.0f, -(focalX * gPosV.x) / (gPosV.z * gPosV.z),
							0.0f, focalY / gPosV.z, -(focalY * gPosV.y) / (gPosV.z * gPosV.z),
							0.0f, 0.0f, 0.0f);
		mat3x3 sigmaPrime = (J) * (W) * (sigma) * transpose(W) * transpose(J);

		// x^T * Sigma^(-1) * x
		vec2 d = gaussianPosScreen.xy - vec2(index);
		d.y = -d.y;
		vec3 cov = vec3(sigmaPrime[0][0], sigmaPrime[0][1], sigmaPrime[1][1]);
		float det = (cov.x * cov.z - cov.y * cov.y);

		if(det != 0.0f)
		{
			float det_inv = 1.f / det;
			vec3 conO = vec3(cov.z * det_inv, -cov.y * det_inv, cov.x * det_inv);
			
			// exp(-0.5f * x^T * Sigma^(-1) * x)
			float f = -0.5f * (conO.x * d.x * d.x + conO.z * d.y * d.y) - conO.y * d.x * d.y;
			float gaussian = exp(f);
			
			// Apply gaussian
			color += gaussian * vec3(1.0f, 1.0f, 1.0f);

			//color += length(d) < 20.0f ? vec3(1.0f) : vec3(0.0f);
		}
	}

	// Write color
	color = clamp(color, vec3(0.0f), vec3(1.0f));
	imageStore(swapchainImage, ivec2(index), vec4(color, 1.0f));
}