#version 450

#extension GL_GOOGLE_include_directive: require

#include "../Common/Common.glsl"
#include "../Common/GaussiansStructs.glsl"

#define LOCAL_SIZE 32

layout (local_size_x = LOCAL_SIZE, local_size_y = 1) in;

// UBO
layout(binding = 0) uniform CamUBO 
{
	mat4 viewMat;
	mat4 projMat;
} ubo;

// SBO
layout(binding = 1) buffer GaussiansBuffer
{
	GaussianData gaussians[];
} gaussiansBuffer;

// SBO
layout(binding = 2) buffer GaussiansSortListBuffer
{
	GaussianSortData sortData[];
} listBuffer;

// SBO
layout(binding = 3) buffer GaussiansCullDataBuffer
{
	GaussianCullData data;
} cullData;

// Push constant
layout(push_constant) uniform PushConstantData
{
	vec4 clipPlanes; // vec4(nearPlane, farPlane, numGaussians, 0)
	uvec4 resolution; // uvec4(width, height, 0, 0)
} pc;

// Get extents uvec4(minX, minY, maxX, maxY), including min, excluding max
// (to avoid adding gaussians beyond screen edges)
uvec4 getGaussianTileExtents(uint threadIndex, vec4 gPosV, ivec2 gridSize, vec3 cov, float width, float height)
{
	float det = (cov.x * cov.z - cov.y * cov.y);

	// Eigenvalues of covariance matrix corresponds to the gaussian's extents.
	// lambda = m +- sqrt(m^2 - det)
	float m = (cov.x + cov.z) * 0.5f;
	float lambda0 = m + sqrt(max(m * m - det, 0.0f));
	float lambda1 = m - sqrt(max(m * m - det, 0.0f));
	float radius = ceil(3.0f * sqrt(max(lambda0, lambda1)));

	// Screen space position
	vec4 screenSpacePos = getScreenSpacePosition(width, height, gPosV, ubo.projMat);
	uvec4 gExtents = uvec4(
		clamp(int((screenSpacePos.x - radius) / TILE_SIZE), 0, gridSize.x), 
		clamp(int((screenSpacePos.y - radius) / TILE_SIZE), 0, gridSize.y),
		clamp(int((screenSpacePos.x + radius) / TILE_SIZE) + 1, 0, gridSize.x), 
		clamp(int((screenSpacePos.y + radius) / TILE_SIZE) + 1, 0, gridSize.y)
	);

	return gExtents;
}

uint getDepthKey(float viewSpacePosZ)
{
	const float nearPlane = pc.clipPlanes.x;
	const float farPlane = pc.clipPlanes.y;

	// Normalized depth
	float normalizedDepth = (-viewSpacePosZ - nearPlane) / (farPlane - nearPlane);
	normalizedDepth = clamp(normalizedDepth, 0.0f, 1.0f);

	return uint(normalizedDepth * float(MAX_UINT32));
}

void main()
{
	uint threadIndex = gl_GlobalInvocationID.x;
	uint numGaussians = uint(pc.clipPlanes.z + 0.5f);
	
	// Make sure compute work is within bounds
	if(threadIndex >= numGaussians) 
		return;

	// Non-conservative frustum culling (near plane)
	vec4 viewSpacePos = ubo.viewMat * vec4(gaussiansBuffer.gaussians[threadIndex].position.xyz, 1.0f);
	if(-viewSpacePos.z <= pc.clipPlanes.x)
		return;
		
	// Non-conservative frustum culling (side planes)
	vec4 ndcPos = ubo.projMat * viewSpacePos;
	ndcPos.xyz /= ndcPos.w;
	if(abs(ndcPos.x) > CULLING_NDC_LIMIT || abs(ndcPos.y) > CULLING_NDC_LIMIT)
		return;

	// Depth key
	uint depthKey = getDepthKey(viewSpacePos.z);

	// Extents
	const ivec2 gridSize = ivec2(
		(int(pc.resolution.x) + TILE_SIZE - 1) / TILE_SIZE,
		(int(pc.resolution.y) + TILE_SIZE - 1) / TILE_SIZE
	);
	const float width = float(pc.resolution.x);
	const float height = float(pc.resolution.y);
	vec3 cov = getCovarianceMatrix(
		width, 
		height, 
		gaussiansBuffer.gaussians[threadIndex].scale.xyz, 
		gaussiansBuffer.gaussians[threadIndex].rot.xyzw,
		viewSpacePos,
		ubo.viewMat
	);
	uvec4 gExtents = getGaussianTileExtents(threadIndex, viewSpacePos, gridSize, cov, width, height);
	
	// Store symmetric covariance matrix
	gaussiansBuffer.gaussians[threadIndex].covariance.xyz = cov;

	// Add 1 element per gaussian per overlapped tile, which are then sorted in subsequent passes
	uint numElemsToAdd = (gExtents.z - gExtents.x) * (gExtents.w - gExtents.y);
	uint idOffset = atomicAdd(cullData.data.numGaussiansToRender.x, numElemsToAdd);
	for(uint y = gExtents.y; y < gExtents.w; ++y)
	{
		for(uint x = gExtents.x; x < gExtents.z; ++x)
		{
			// Tile key
			uint tileKey = y * gridSize.x + x;

			// Add gaussian to list
			// TODO: fix for overflow
			uint idLocal = (y - gExtents.y) * (gExtents.z - gExtents.x) + (x - gExtents.x);
			uint id = idOffset + idLocal;
			if(id < cullData.data.numGaussiansToRender.y) // Temporary solution to avoid overflow
			{
				listBuffer.sortData[id].data.x = tileKey;
				listBuffer.sortData[id].data.y = depthKey;
				listBuffer.sortData[id].data.z = threadIndex;
			}
		}
	}
}