#version 450

#extension GL_GOOGLE_include_directive: require
#extension GL_EXT_shader_explicit_arithmetic_types_int64: require

#include "../Common/GaussiansStructs.glsl"
#include "../Common/CommonRadix.glsl"

// Receive work group size as a specialization constant
layout(constant_id = 0) const uint WORK_GROUP_SIZE = 512u;

layout (local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

// SBO
layout(binding = 0) buffer GaussiansSortListBuffer
{
	GaussianSortData sortData[];
} listBuffer;

// SBO
layout(binding = 1) buffer SumTableBuffer
{
	uvec4 buckets[];
} sumTable;

// Push constant
layout(push_constant) uniform PushConstantData
{
	uvec4 data; // uvec4(numSortElements, shiftBits, numSumThreadGroups, 0)
} pc;

// Shared memory (1024 * 16 = 16384 bytes are guaranteed to be available in Vulkan)
shared uint sharedHistogram[WORK_GROUP_SIZE * BIN_COUNT];

void main()
{
	uint threadIndex = gl_GlobalInvocationID.x;
	uint localIndex = gl_LocalInvocationID.x;
	uint groupIndex = gl_WorkGroupID.x;
	uint numWorkGroups = gl_NumWorkGroups.x;
	uint numSortElements = pc.data.x;

	// Clear shared memory
	for(uint i = 0; i < BIN_COUNT; ++i) 
	{
		sharedHistogram[(i * WORK_GROUP_SIZE) + localIndex] = 0u;
	}
	barrier();

	// Increment buckets in shared memory
	if(threadIndex < numSortElements) 
	{
		uint64_t shiftBits = uint64_t(pc.data.y);
		uint64_t sortValue = (uint64_t(listBuffer.sortData[threadIndex].data.x) << 32u) | uint64_t(listBuffer.sortData[threadIndex].data.y);
		uint finalSortValue = uint(sortValue >> shiftBits) & uint(BIN_COUNT - 1u);

		// TODO: check if this can be done without atomics. Should be possible, since it seems 
		// that each thread gets its own set of unique buckets.
		atomicAdd(sharedHistogram[finalSortValue * WORK_GROUP_SIZE + localIndex], 1u);
	}
	barrier();

	// Compute sum into sum table
	if(localIndex < BIN_COUNT) 
	{
		uint sum = 0u;
		for(uint i = 0u; i < WORK_GROUP_SIZE; ++i) 
		{
			sum += sharedHistogram[localIndex * WORK_GROUP_SIZE + i];
		}
		sumTable.buckets[localIndex * numWorkGroups + groupIndex].x = sum;
	}
}