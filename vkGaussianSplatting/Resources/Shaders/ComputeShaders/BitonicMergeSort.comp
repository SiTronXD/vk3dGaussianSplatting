#version 450

#extension GL_GOOGLE_include_directive: require
#extension GL_EXT_shader_explicit_arithmetic_types_int64: require

#include "../Common/GaussiansStructs.glsl"

// This has to match the BMS_WORK_GROUP_SIZE in Renderer.h
#define WORK_GROUP_SIZE 512

#define ALG_LOCAL_BMS 0
#define ALG_LOCAL_DISPERSE 1
#define ALG_BIG_FLIP 2
#define ALG_BIG_DISPERSE 3

layout (local_size_x = WORK_GROUP_SIZE, local_size_y = 1) in;

// SBO
layout(binding = 0) buffer GaussiansSortListBuffer
{
	GaussianSortData sortData[];
} listBuffer;

// Push constant
layout(push_constant) uniform PushConstantData
{
	uvec4 data; // uvec4(algorithm type, h, 0, 0)
} pc;

// 1024 * 16 = 16384 bytes are guaranteed to be available in Vulkan
// vec4(sortKey0, sortKey1, id, 0)
shared uvec4 localValues[WORK_GROUP_SIZE * 2];

void localCompareAndSwap(uvec2 id)
{
	uint64_t keyX = (uint64_t(localValues[id.x].x) << 32u) | uint64_t(localValues[id.x].y);
	uint64_t keyY = (uint64_t(localValues[id.y].x) << 32u) | uint64_t(localValues[id.y].y);

	if(keyX > keyY)
	{
		uvec4 temp = localValues[id.x];
		localValues[id.x] = localValues[id.y];
		localValues[id.y] = temp;
	}
}

void globalCompareAndSwap(uvec2 id)
{
	uint64_t keyX = (uint64_t(listBuffer.sortData[id.x].data.x) << 32u) | uint64_t(listBuffer.sortData[id.x].data.y);
	uint64_t keyY = (uint64_t(listBuffer.sortData[id.y].data.x) << 32u) | uint64_t(listBuffer.sortData[id.y].data.y);

	if(keyX > keyY)
	{
		uvec4 temp = listBuffer.sortData[id.x].data;
		listBuffer.sortData[id.x].data = listBuffer.sortData[id.y].data;
		listBuffer.sortData[id.y].data = temp;
	}
}

void localFlip(uint h)
{
	uint t = gl_LocalInvocationID.x;

	uint halfH = h / 2;
	uint tModHH = t % halfH;
	uint q = uint((2 * t) / h) * h;

	uvec2 indices = uvec2(
		q + tModHH,
		q + h - tModHH - 1
	);

	barrier();

	localCompareAndSwap(indices);
}

void localDisperse(uint h)
{
	uint t = gl_LocalInvocationID.x;

	for( ; h > 1; h /= 2)
	{
		uint halfH = h / 2;
		uint tModHH = t % halfH;
		uint q = uint((2 * t) / h) * h;

		uvec2 indices = uvec2(
			q + tModHH,
			q + tModHH + halfH
		);

		barrier();

		localCompareAndSwap(indices);
	}
}

void bigFlip(uint h)
{
	uint t = gl_GlobalInvocationID.x;

	uint halfH = h / 2;
	uint tModHH = t % halfH;
	uint q = uint((2 * t) / h) * h;

	uvec2 indices = uvec2(
		q + tModHH,
		q + h - tModHH - 1
	);

	globalCompareAndSwap(indices);
}

void bigDisperse(uint h)
{
	uint t = gl_GlobalInvocationID.x;

	uint halfH = h / 2;
	uint tModHH = t % halfH;
	uint q = uint((2 * t) / h) * h;

	uvec2 indices = uvec2(
		q + tModHH,
		q + tModHH + halfH
	);

	globalCompareAndSwap(indices);
}

// Regular bitonic mergesort within thread group
void localBms(uint h)
{
	for(uint hh = 2; hh <= h; hh *= 2)
	{
		localFlip(hh);
		localDisperse(hh / 2);
	}
}

void main()
{
	uint algType = pc.data.x;
	uint h = pc.data.y;
	
	// Global offset for local work group
	uint offset = WORK_GROUP_SIZE * gl_WorkGroupID.x;
	uint t = gl_LocalInvocationID.x;

	// Copy values into shared memory for local sub algorithms
	// (otherwise work directly in buffer memory)
	if(algType <= ALG_LOCAL_DISPERSE)
	{
		localValues[t * 2]		= listBuffer.sortData[(offset + t) * 2].data;
		localValues[t * 2 + 1]	= listBuffer.sortData[(offset + t) * 2 + 1].data;
	}

	switch(algType) 
	{
	case ALG_LOCAL_BMS:
		localBms(h);
		break;

	case ALG_LOCAL_DISPERSE:
		localDisperse(h);
		break;

	case ALG_BIG_FLIP:
		bigFlip(h);
		break;

	case ALG_BIG_DISPERSE:
		bigDisperse(h);
		break;
	}

	// Copy values from shared memory into buffer
	if(algType <= ALG_LOCAL_DISPERSE)
	{
		barrier();

		listBuffer.sortData[(offset + t) * 2].data		= localValues[t * 2];
		listBuffer.sortData[(offset + t) * 2 + 1].data	= localValues[t * 2 + 1];
	}
}