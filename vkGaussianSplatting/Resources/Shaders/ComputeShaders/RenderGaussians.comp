#version 450

#extension GL_GOOGLE_include_directive: require

#include "../Common/Common.glsl"
#include "../Common/GaussiansStructs.glsl"

#define GROUP_SIZE_X 16
#define GROUP_SIZE_Y 16
#define ENTIRE_GROUP_SIZE (GROUP_SIZE_X * GROUP_SIZE_Y)

layout (local_size_x = GROUP_SIZE_X, local_size_y = GROUP_SIZE_Y) in;

// SBO
layout(binding = 0) readonly buffer GaussiansBuffer
{
	GaussianData gaussians[];
} gaussiansBuffer;

// SBO
layout(binding = 1) readonly buffer GaussiansSortListBuffer
{
	GaussianSortData sortData[];
} listBuffer;

// SBO
layout(binding = 2) readonly buffer GaussiansRangesBuffer
{
	GaussianTileRangeData rangeData[];
} rangesBuffer;

// UBO
layout(binding = 3) readonly uniform CamUBO 
{
	mat4 viewMat;
	mat4 projMat;
} ubo;

layout (binding = 4, rgba8) uniform image2D swapchainImage;

// Push constant
layout(push_constant) uniform PushConstantData
{
	uvec4 resolution;
} pc;

struct SharedGaussianData
{
	vec2 gScreenPos;
	vec4 gColorAlpha;
	vec3 gCovInv;
};

shared SharedGaussianData sharedGaussianData[ENTIRE_GROUP_SIZE];

void main()
{
	uvec2 threadIndex = gl_GlobalInvocationID.xy;
	uint localIndex = gl_LocalInvocationID.x + gl_LocalInvocationID.y * GROUP_SIZE_X;
	uvec2 res = pc.resolution.xy;

	// UVs
	float width = float(res.x);
	float height = float(res.y);
	float aspectRatio = width / height;
	vec2 uv = (vec2(threadIndex) / vec2(res.xy)) * 2.0 - vec2(1.0);
	uv.x *= aspectRatio;

	vec3 color = vec3(0.0f);
	float Ti = 1.0f;

	const mat4 viewMat = ubo.viewMat;
	
	int gridWidth = (int(res.x) + TILE_SIZE - 1) / TILE_SIZE;
	uvec2 tilePos = threadIndex / uvec2(TILE_SIZE);
	uint tileIndex = tilePos.y * uint(gridWidth) + tilePos.x;
	uvec2 tileRange = rangesBuffer.rangeData[tileIndex].range.xy;

	// Loop through gaussians and render them
	bool done = false;
	for(uint i = tileRange.x; i < tileRange.y; i += ENTIRE_GROUP_SIZE)
	{
		// Gaussian	data
		barrier();
		uint tempIndex = i + localIndex;
		if(tempIndex < tileRange.y)
		{
			uint gaussianIndex = listBuffer.sortData[tempIndex].data.z;
			vec4 gPosV = viewMat * vec4(gaussiansBuffer.gaussians[gaussianIndex].position.xyz, 1.0f);
			sharedGaussianData[localIndex].gScreenPos = getScreenSpacePosition(width, height, gPosV, ubo.projMat).xy;
			
			sharedGaussianData[localIndex].gColorAlpha = gaussiansBuffer.gaussians[gaussianIndex].color.xyzw;

			vec3 gCovInv = vec3(0.0f);
			vec3 gCov = gaussiansBuffer.gaussians[gaussianIndex].covariance.xyz;
			float det = (gCov.x * gCov.z - gCov.y * gCov.y);
			if(det != 0.0f)
			{
				float detInv = 1.0f / det;
				gCovInv = vec3(gCov.z, -gCov.y, gCov.x) * detInv;
			}
			else
			{
				sharedGaussianData[localIndex].gColorAlpha.a = 0.0f;
			}

			sharedGaussianData[localIndex].gCovInv = gCovInv;
		}
		barrier();

		uint limit = done ? 0 : min(ENTIRE_GROUP_SIZE, tileRange.y - i);
		for(uint j = 0; j < limit; ++j)
		{
			vec2 gScreenPos = sharedGaussianData[j].gScreenPos;
			vec4 gColorAlpha = sharedGaussianData[j].gColorAlpha;
			vec3 gCovInv = sharedGaussianData[j].gCovInv;

			// x^T * Sigma^(-1) * x
			vec2 evalX = gScreenPos - vec2(threadIndex);
			evalX.y = -evalX.y;

			// exp(-0.5f * x^T * Sigma^(-1) * x)
			float f = -0.5f * (gCovInv.x * evalX.x * evalX.x + gCovInv.z * evalX.y * evalX.y) - gCovInv.y * evalX.x * evalX.y;
			float alpha = gColorAlpha.a * exp(f);

			// Important for precision
			if(f > 0.0f || alpha < 1.0f / 255.0f)
				continue;
				
			// Apply gaussian
			color += Ti * alpha * gColorAlpha.rgb;

			float nextT = Ti * (1.0f - alpha);

			// Important for precision
			if(nextT < 0.0001f)
			{
				done = true;
				break;
			}
			
			Ti = nextT;
		}
	}

	// Write color
	if(threadIndex.x < res.x && threadIndex.y < res.y)
	{
		color = clamp(color, vec3(0.0f), vec3(1.0f));
		imageStore(swapchainImage, ivec2(threadIndex), vec4(color, 1.0f));
	}
}